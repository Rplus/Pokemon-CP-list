$types: ('Normal', 'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel', 'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark', 'Fairy', 'Legendary', 'Alolan');

%matched-type {
  display: unset;
}

%activity-itrm {
  --activity: 1;
}

:root {
  --iv-percentage: 100;
  --sprite-grid-col: 28;
  --sprite-grid-row: 18;
  --img-size: 80px;
  --pm-sort-by: var(--pm-pokedex);
  --pm-sort-dir: -1;
}

.workspace {
  margin: 0 auto;
  padding: 1vmin calc(1vmin + .5em);
}

h1 {
  margin-bottom: 1.5rem;
  text-align: center;
}

td > input {
  display: block;
  width: 100%;
}

.pmIV {
  &::before {
    content: counter(iv-percentage) '%';
    counter-reset: iv-percentage var(--iv-percentage);
  }
}

.pmCost {
  &::before {
    content: 'stardust: ' counter(cost-stardust) '\A candy: ' counter(cost-candy);
    counter-reset:
      cost-stardust var(--cost-stardust)
      cost-candy var(--cost-candy);
    white-space: pre-wrap;
    color: #999;
    font-size: smaller;
  }
}

.pmList {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  grid-gap: calc(2vmin + .5em) calc(1vmin + .5em);
  list-style: none;
}

.pm {
  position: relative;
  padding-top: 1em;
  transition: transform .3s;
  display: none;
  order: calc(var(--pm-sort-by) * var(--pm-sort-dir));
  counter-reset: cp var(--pm-cp) hp var(--pm-hp);

  &:hover {
    * {
      opacity: unset !important;
    }
  }
}

.pm_img {
  width: var(--img-size);
  height: var(--img-size);
  margin: 0 auto;
  background-image: url('img/sprite1-4.png');
  background-size:
    calc(var(--sprite-grid-col) * var(--img-size))
    calc(var(--sprite-grid-row) * var(--img-size));
  background-repeat: no-repeat;
  background-position:
    calc(var(--pm-col) * var(--img-size) * -1)
    calc(var(--pm-row) * var(--img-size) * -1);
  // transition: opacity .3s;
  opacity: .5;

  .pm[data-alolan="true"] & {
    background: var(--pm-special-bgi);
    background-size: contain;
  }

  .pm[data-number="386"] & {
    background: var(--pm-special-bgi);
    background-size: contain;
  }
}

.pm_cp {
  position: absolute;
  top: 0;
  left: 0;

  &::before {
    content: counter(cp);
    font-size: larger;
    font-family: monospace;
    font: 100 calc(1em + 2vmin) monospace;
  }
}

.pm_name {
  position: absolute;
  top: 0;
  right: 0;
  padding-left: .5em;
  white-space: pre-wrap;
  text-align: right;
  font-size: smaller;
  color: rgba(#000, .75);
  opacity: .3;

  &::after {
    content: '\A#' attr(data-podex) ' ';
  }
}

.pm_info {
  position: absolute;
  left: 0;
  bottom: 0;
  white-space: pre;
  font-family: monospace;
  font-size: smaller;
  text-align: right;
  opacity: .5;
    color: rgba(#000, .5);

  &::after {
    content:
      counter(hp) ' HP'
      '\A' attr(data-atk) ' A.'
      '\A' attr(data-def) ' D.'
      '\A' attr(data-sta) ' S.';
  }
}

.pm_types {
  position: absolute;
  right: 0;
  bottom: 0;
  display: flex;
  opacity: .5;
}

.pm_type {
  width: 1rem;
  height: 1rem;
  margin-right: 2px;
  background-size: contain;
  background-repeat: no-repeat;
  background-origin: content-box;

  @for $i from 1 through length($types) {
    &--#{nth($types, $i)} {
      background-image: url('img/type_#{nth($types, $i)}.png');
    }
  }
}


// sort
.pmSortBox {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-bottom: 2em;
  text-align: center;

  &::before {
    content: 'sort by';
    display: block;
    width: 100%;
    font-style: italic;
    color: rgba(#000, .5);
  }
}

.pmSortGroup {
  position: relative;
}

.pmSort {
  position: relative;
  z-index: calc(1 - var(--activity, 0));
  padding-right: .2em;
  padding-left: .5em;
  cursor: pointer;
  box-shadow: 0 0 0 1px rgba(#000, .2);
  background-color: #{'rgba(255, 255, 200, var(--activity, 0))'};
  text-transform: uppercase;
  opacity: var(--activity, .3);

  &::after {
    content: attr(data-anti-dir);
    opacity: var(--activity, 0);
  }

  + #{&} {
    position: absolute;
    top: 0;
    left: 0;
  }
}

$sort-type: (
  ('sort-by-id-â–²' --pm-pokedex 1),
  ('sort-by-id-â–¼' --pm-pokedex -1),
  ('sort-by-cp-â–²' --pm-cp 1),
  ('sort-by-cp-â–¼' --pm-cp -1),
  ('sort-by-atk-â–²' --pm-atk 1),
  ('sort-by-atk-â–¼' --pm-atk -1),
  ('sort-by-def-â–²' --pm-def 1),
  ('sort-by-def-â–¼' --pm-def -1),
  ('sort-by-sta-â–²' --pm-sta 1),
  ('sort-by-sta-â–¼' --pm-sta -1),
  ('sort-by-tank-â–²' --pm-tank 1),
  ('sort-by-tank-â–¼' --pm-tank -1),
);
@each $typeG in $sort-type {
  $type: nth($typeG, 1);
  input[name="sort-by"][id="#{$type}"]:checked {
    ~ .pmCtrlBox .pmSort[for="#{$type}"] {
      @extend %activity-itrm;
    }

    ~ .pmList .pm {
      --pm-sort-by: var(nth($typeG, 2));
      --pm-sort-dir: nth($typeG, 3);
    }
  }
}

// Filter
.pmCtrlBox {
  max-width: 50rem;
  margin: 0 auto;

  table {
    margin-left: auto;
    margin-right: auto;
    text-transform: capitalize;
    border-spacing: .5em .25em;
    font-size: smaller;
  }

  input[type="button"] {
    padding-left: .25em;
    padding-right: .25em;
  }

  > * {
    margin-bottom: 2em;
  }
}

.pmFilter {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  text-align: start;
}

.pmFilter__header {
  display: flex;
  width: 100%;
  justify-content: space-around;
  margin-bottom: 1.5em;
  font-style: italic;
  color: rgba(#000, .5);

  button {
    padding: 0 .5em;
    text-transform: uppercase;
  }
}

label[for="types-filter-ctrl"] {
  &::before {
    content: 'ðŸ˜š';
    padding-right: .25em;
    font-style: normal;
    color: #000;
  }

  #types-filter-ctrl:checked ~ .pmFilter__header &::before {
    content: 'ðŸ˜„';
  }
}

.pmFilter__label {
  position: relative;
  flex-basis: 6.5em;
  display: inline-flex;
  align-items: center;
  margin-left: 1vw;
  margin-right: 1vw;
  margin-bottom: 1em;
  transform-origin: 0 0;
  text-transform: capitalize;
  cursor: pointer;
  font-size: smaller;
  color: rgba(0, 0, 0, 0.8);

  &::before {
    content: '';
    display: inline-block;
    width: 2em;
    height: 2em;
    margin-right: .2em;
    // background-image: var(--bgi);
    background-size: contain;
    background-repeat: no-repeat;
    opacity: var(--activity, .3);
    filter: contrast(var(--activity, 0));
  }

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 3em;
    height: 3em;
    border-radius: 50%;
    margin: -.5em;
    background-color: rgba(#ff9, .5);
    opacity: var(--activity, 0);
  }

  #types-filter-ctrl:not(:checked) ~ & {
    display: none;
  }
}

@for $i from 1 through length($types) {
  $type: nth($types, $i);

  .pmFilter__label[for="ck-#{$type}"]::before {
    background-image: url('img/type_#{nth($types, $i)}.png');
  }

  .pmFilter__checkbox[id="ck-#{$type}"]:checked {
    ~ .pmCtrlBox .pmFilter__label[for="ck-#{$type}"] {
      @extend %activity-itrm;
    }

    ~ .pmList .pm[data-type*="#{$type}"] {
      @extend %matched-type;
    }
  }
}

.pokedexRange {
  display: flex;
  flex-direction: column;
  width: 50%;
  margin-left: auto;
  margin-right: auto;
  padding-bottom: 2em;
  text-align: center;
  border-top: 1px dashed rgba(#000, .1);

  > label {
    position: relative;
    display: block;
    width: 100%;
    counter-reset: value var(--value);
    order: var(--value);
    background-image:
      linear-gradient(
        to right,
        rgba(#000, .05) 0,
        rgba(#000, 0) 100% * 151 / 516,
        rgba(#000, .05) 0,
        rgba(#000, 0) 100% * 251 / 516,
        rgba(#000, .05) 0,
        rgba(#000, 0) 100% * 386 / 516,
        rgba(#000, .05) 0,
        rgba(#000, 0)
      );

    &::before {
      content: counter(value);
      position: absolute;
      right: 100%;
      margin-right: .5em;
    }
  }

  input {
    width: 100%;
  }

  &__header {
    position: relative;
    margin: 0;
    padding-top: .5em;
    padding-bottom: 1em;
    font-weight: 500;
    font-size: 1em;
    font-style: italic;
    color: rgba(#000, .5);

    .gen1,
    .gen2,
    .gen3,
    .gen4 {
      position: absolute;
      top: 2em;
      right: 100% * (516 - 151) / 516;
      font-size: smaller;
      font-style: normal;
      opacity: .5;
    }

    .gen2 {
      right: 100% * (516 - 251) / 516;
    }

    .gen3 {
      right: 100% * (516 - 386) / 516;
    }

    .gen4 {
      right: 100% * (516 - 493) / 516;
    }
  }
}

.footer {
  position: relative;
  padding: 3em;
}

.ctrl-info {
  position: relative;
  padding-left: 1.25em;
  margin-right: 1em;

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    margin-top: auto;
    margin-bottom: auto;
    width: 1em;
    height: 1em;
    box-shadow: inset 0 0 1px 1px rgba(#000, .5);
  }

  &::before {
    opacity: var(--activity, 0);
    box-shadow:
      inset 0 0 1px 1px rgba(#000, .5),
      inset 0 0 0 4px #fff,
      inset 0 0 0 10px rgba(#000, .5);
  }

  input[id="show-ads"]:checked ~ .footer &[for="show-ads"],
  input[id="show-types"]:checked ~ .footer &[for="show-types"] {
    --activity: 1;
  }
}

input[id="show-ads"]:not(:checked) ~ .pmList .pm_info,
input[id="show-types"]:not(:checked) ~ .pmList .pm_types {
  opacity: 0;
}

#go-to-top {
  position: fixed;
  left: 0;
  bottom: 0;
  z-index: 1;
  padding: .5em 1em;
  text-transform: capitalize;
  background-color: #ffc;
  opacity: .3;

  &:hover {
    opacity: 1;
  }
}

.info {
  position: absolute;
  right: 0;
  bottom: 0;
  margin-top: 3em;
  opacity: .5;
  text-align: right;
  list-style: none;
}

.dialog {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1;
  width: calc(12em + 10vw);
  max-height: 85vh;
  margin: auto;
  padding: 0 3vw;
  background-color: #fff;
  font-family: monospace;
  font-size: larger;
  overflow: auto;
  box-shadow: 0 0 0 100vw rgba(#000, .25);

  &[aria-hidden="true"] {
    display: none;
  }

  summary,
  .caption {
    position: sticky;
    top: 0;
    z-index: 1;
    font-size: smaller;
    height: 15px;
    background-color: #fff;
  }

  .caption {
    visibility: hidden;
    text-align: center;
  }

  .thead {
    position: sticky;
    top: 1em;
    margin-bottom: 5px;
    padding-top: .3em;
    font-size: smaller;
    font-weight: 900;
    border-bottom: 1px dotted;
    background-color: #fff;
  }

  .tr {
    display: flex;
    align-items: center;
    width: 100%;
    padding-bottom: 2px;
    text-align: center;

    &:nth-of-type(3n) {
      padding-bottom: 10px;
    }

    > div {
      width: 15%;
    }

    > div:first-child,
    > div:nth-of-type(5) {
      width: 25%;
    }

    > div:nth-of-type(6) {
      margin-left: .5em;
    }
  }

  .td {
    padding: 1px .5em;
  }

  .dialog__closeBtn {
    position: fixed;
    top: 5vh;
    right: 2vw;
    width: 1.5em;
    height: 1.5em;
    font-size: 8vw;
  }

  .lv-cp__iv100 {
    .thead,
    .tbody {
      columns: 2;
      column-gap: .5em;
      column-rule: dotted 1px #ccc;
    }

    .tr {
      &:nth-of-type(3n) {
        padding-bottom: unset;
      }

      &:nth-of-type(5n) {
        padding-bottom: 10px;
      }

      > div {
        width: 30%;
        color: lighten(#000, 70%);
        font-size: smaller;

        &:nth-of-type(1) {
          width: 20%;
        }

        &:nth-of-type(2) {
          width: 50%;
          color: #000;
          font-size: larger;
          font-weight: 900;
        }
      }
    }
  }

  details {
    margin-top: 1em;
    margin-bottom: 1em;
  }
}

// reset
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  overflow-y: scroll;
}

.sr-only {
  position: fixed;
  top: 0;
  left: 0;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
